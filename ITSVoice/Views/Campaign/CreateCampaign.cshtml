@model List<ITSVoice.Models.BaseAction>
@using ITSVoice.Models

@section styles
    {
    <style>
        .card.draggable {
            margin-bottom: 1rem;
            cursor: grab;
        }

        .droppable {
            background-color: var(--primary);
            min-height: 120px;
            margin-bottom: 1rem;
        }
    </style>
}

<div id="main-content">
    <div class="container-fluid">
        <div class="row py-3">
            <div class="col-sm-6 col-md-6 col-xl-6">
                <div class="card bg-light">
                    <div class="card-body" id="act">
                        <h6 class="card-title text-uppercase text-truncate py-2">Choose Actions</h6>
                        <div class="items border border-light">
                            @{
                                for (int i = 0; i < Model.Count; i++)
                                {
                                    <div class="card draggable shadow" id="action-@i" draggable="true" ondragstart="drag(event)">
                                        <div class="card-body p-2">
                                            <div class="card-title">
                                                <a href="" class="lead font-weight-light">Action: @Model[i].Action.ToString()</a>
                                                <span class="lnr lnr-circle-minus text-danger" id="remove-@i" onclick="removeAction(this)"></span>
                                            </div>

                                            @Html.Hidden($"CallActions[{i}].Action", Model[i].Action.ToString(), new { @class = "form-control form-control-sm" })

                                            @if (Model[i].Action == "Callback")
                                            {
                                                Callback obj = Model[i].GetInstance<Callback>();

                                                @Html.Label($"CallActions[{i}].CallbackDelay:")
                                                @Html.TextBox($"CallActions[{i}].CallbackDelay", obj.CallbackDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].CallbackDelay")
                                                <br />
                                                @Html.Label($"CallActions[{i}].DisconnectDelay:")
                                                @Html.TextBox($"CallActions[{i}].DisconnectDelay", obj.CallbackDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].CallbackDelay")
                                            }
                                            else if (Model[i].Action == "Beep")
                                            {
                                                Beep obj = Model[i].GetInstance<Beep>();

                                                @Html.Label($"CallActions[{i}].FilePath:")
                                                @Html.DropDownList($"CallActions[{i}].FilePath", new SelectList(obj.OptionalFilePathItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].FilePath")
                                            }
                                            else if (Model[i].Action == "WaveFile")
                                            {
                                                WaveFile obj = Model[i].GetInstance<WaveFile>();

                                                @Html.Label($"CallActions[{i}].InitialDelay:")
                                                @Html.TextBox($"CallActions[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].InitialDelay")
                                                <br />
                                                @Html.Label($"CallActions[{i}].FilePath:")
                                                @Html.DropDownList($"CallActions[{i}].FilePath", new SelectList(obj.FilePathItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].FilePath")

                                            }
                                            else if (Model[i].Action == "InputBoolResponse")
                                            {
                                                InputBoolResponse obj = Model[i].GetInstance<InputBoolResponse>();

                                                @Html.Label($"CallActions[{i}].InitialDelay:")
                                                @Html.TextBox($"CallActions[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].InitialDelay")
                                                <br />
                                                @Html.Label($"CallActions[{i}].TrueFilePath:")
                                                @Html.DropDownList($"CallActions[{i}].TrueFilePath", new SelectList(obj.TrueFilePathItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].TrueFilePath")
                                                <br />
                                                @Html.Label($"CallActions[{i}].FalseFilePath:")
                                                @Html.DropDownList($"CallActions[{i}].FalseFilePath", new SelectList(obj.FalseFilePathItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].FalseFilePath")
                                            }
                                            else if (Model[i].Action == "Input")
                                            {
                                                Input obj = Model[i].GetInstance<Input>();

                                                @Html.Label($"CallActions[{i}].Timeout:")
                                                @Html.TextBox($"CallActions[{i}].Timeout", obj.Timeout, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].Timeout")
                                                <br />
                                                @Html.Label($"CallActions[{i}].Type:")
                                                @Html.DropDownList($"CallActions[{i}].Type", new SelectList(obj.TypeItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].Type")
                                                <br />
                                                @Html.Label($"CallActions[{i}].Length:")
                                                @Html.TextBox($"CallActions[{i}].Length", obj.Length, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].Length")
                                            }
                                            else if (Model[i].Action == "InputStringResponseTTS")
                                            {
                                                InputStringResponseTTS obj = Model[i].GetInstance<InputStringResponseTTS>();

                                                @Html.Label($"CallActions[{i}].InitialDelay:")
                                                @Html.TextBox($"CallActions[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].InitialDelay")
                                                <br />
                                                @Html.Label($"CallActions[{i}].Text:")
                                                @Html.TextBox($"CallActions[{i}].Text", obj.Text, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].Text")
                                                <br />
                                                @Html.Label($"CallActions[{i}].VoiceName:")
                                                @Html.TextBox($"CallActions[{i}].VoiceName", obj.VoiceName, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].VoiceName")
                                            }
                                            else if (Model[i].Action == "InputStringResponseWaveFile")
                                            {
                                                InputStringResponseWaveFile obj = Model[i].GetInstance<InputStringResponseWaveFile>();

                                                @Html.Label($"CallActions[{i}].InitialDelay:")
                                                @Html.TextBox($"CallActions[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].InitialDelay")
                                                <br />
                                                @Html.Label($"CallActions[{i}].FilePath:")
                                                @Html.DropDownList($"CallActions[{i}].FilePath", new SelectList(obj.FilePathItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].FilePath")
                                            }
                                            else if (Model[i].Action == "InputVerify")
                                            {
                                                InputVerify obj = Model[i].GetInstance<InputVerify>();

                                                @Html.Label($"CallActions[{i}].VerificationType:")
                                                @Html.DropDownList($"CallActions[{i}].VerificationType", new SelectList(obj.VerificationTypeItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].VerificationType")
                                                <br />
                                                @Html.Label($"CallActions[{i}].VerificationTimeout:")
                                                @Html.TextBox($"CallActions[{i}].VerificationTimeout", obj.VerificationTimeout, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].VerificationTimeout")
                                                <br />
                                                @Html.Label($"CallActions[{i}].ResponseType:")
                                                @Html.DropDownList($"CallActions[{i}].ResponseType", new SelectList(obj.ResponseTypeItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].ResponseType")
                                            }
                                            else if (Model[i].Action == "ParameterizedWaveFile")
                                            {
                                                ParameterizedWaveFile obj = Model[i].GetInstance<ParameterizedWaveFile>();

                                                @Html.Label($"CallActions[{i}].InitialDelay:")
                                                @Html.TextBox($"CallActions[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].InitialDelay")

                                                @Html.Label($"CallActions[{i}].ParameterIdentifier:")
                                                @Html.TextBox($"CallActions[{i}].ParameterIdentifier", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].ParameterIdentifier")

                                                @Html.Label($"CallActions[{i}].ParameterType:")
                                                @Html.DropDownList($"CallActions[{i}].ParameterType", new SelectList(obj.ParameterTypeItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].ParameterType")

                                                @Html.Label($"CallActions[{i}].OptionalFolder:")
                                                @Html.DropDownList($"CallActions[{i}].OptionalFolder", new SelectList(obj.OptionalFolderItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].OptionalFolder")
                                            }
                                            else if (Model[i].Action == "TTS")
                                            {
                                                TTS obj = Model[i].GetInstance<TTS>();

                                                @Html.Label($"CallActions[{i}].InitialDelay:")
                                                @Html.TextBox($"CallActions[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].InitialDelay")
                                                <br />
                                                @Html.Label($"CallActions[{i}].Text:")
                                                @Html.TextBox($"CallActions[{i}].Text", obj.Text, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].Text")
                                                <br />
                                                @Html.Label($"CallActions[{i}].VoiceName:")
                                                @Html.TextBox($"CallActions[{i}].VoiceName", obj.VoiceName, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"CallActions[{i}].VoiceName")
                                            }

                                        </div>
                                    </div>
                                    <div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!--For Main Actions-->
            <div class="col-sm-6 col-md-6 col-xl-6">
                <form action="/Campaign/CreateCampaign" method="post" id="form">
                    @Html.ValidationSummary(false)
                    <p>CallType:</p>
                    <label class="radio radio-inline">
                        <input type="radio" id="CallType" name="CallType" value="inboundCall"> Inbound Call
                    </label>
                    <label class="radio radio-inline">
                        <input type="radio" id="CallType" name="CallType" value="outboundCall"> Outbound Call
                    </label>
                    <div class="card bg-light">
                        <div class="card-body" id="ActionMain">
                            <h6 class="card-title text-uppercase text-truncate py-2">Call Actions</h6>
                            <div class="items border border-light" id="mainActions">
                                <div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="Name">Name:</label>
                                </div>
                                <div class="col-sm-8">
                                    <input type="text" name="Name" class="form-control form-control-sm" id="Name">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="StartDate">StartDate:</label>
                                </div>
                                <div class="col-sm-8">
                                    <input type="date" class="form-control form-control-sm" id="EndDate" name="EndDate">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="EndDate">EndDate:</label>
                                </div>
                                <div class="col-sm-8">
                                    <input type="date" class="form-control form-control-sm" id="EndDate" name="EndDate">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="DailyStartTime">DailyStartTime:</label>
                                </div>
                                <div class="col-sm-8">
                                    <input type="time" class="form-control form-control-sm" id="DailyStartTime" name="DailyStartTime">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="DailyEndTime">DailyEndTime:</label>
                                </div>
                                <div class="col-sm-8">
                                    <input type="time" class="form-control form-control-sm" id="DailyEndTime" name="DailyEndTime">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="RemoteIP">RemoteIP:</label>
                                </div>

                                <div class="col-sm-8">
                                    <input type="text" class="form-control" id="RemoteIP" name="RemoteIP">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="IsIndefinite">IsIndefinite:</label>
                                </div>
                                <div class="col-sm-8">
                                    <select name="IsIndefinite" id="IsIndefinite" class="form-control form-control-sm">
                                        <option value="1">Yes</option>
                                        <option value="0">No</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="Is24Hours">Is24Hours:</label>
                                </div>
                                <div class="col-sm-8">
                                    <select name="Is24Hours" id="Is24Hours" class="form-control form-control-sm">
                                        <option value="1">Yes</option>
                                        <option value="0">No</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="Status">Status:</label>
                                </div>
                                <div class="col-sm-8">
                                    <select name="Status" id="Status" class="form-control form-control-sm">
                                        <option value="1">Active</option>
                                        <option value="0">InActive</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="Type">Type:</label>
                                </div>
                                <div class="col-sm-8">
                                    <select name="Type" id="Type" class="form-control form-control-sm">
                                        <option value="1">Standard</option>
                                        <option value="2">Transactional</option>
                                        <option value="3">Callback</option>
                                        <option value="4">Answer</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="Cost">Cost:</label>
                                </div>
                                <div class="col-sm-8">
                                    <input type="number" class="form-control" name="Cost" id="Cost">
                                </div>
                            </div>
                        </div>
                        
                    </div>

                    <input type="submit" class="btn btn-sm btn-primary mt-2" />
                </form>
            </div>
        </div>
    </div>
</div>
@section scripts
    {
    <script>
        var count = 1;
        $(document).ready(function () {
            $('#act span').hide();
        });
        const drag = (event) => {
            event.dataTransfer.setData("text/plain", event.target.id);
        }
        const allowDrop = (ev) => {
            if (ev.target.parentElement.parentElement.id == "ActionMain") {
                ev.preventDefault();
                if (hasClass(ev.target, "dropzone")) {
                    addClass(ev.target, "droppable");
                }
            }
        }
        const clearDrop = (ev) => {
            removeClass(ev.target, "droppable");
        }
        const drop = (event) => {
            event.preventDefault();
            const data = event.dataTransfer.getData("text/plain");
            const element = document.querySelector(`#${data}`);

            if (data.includes("action")) {
                const nodeCopy = document.getElementById(data).cloneNode(true);
                nodeCopy.id = "copy" + count;
                ++count;
                try {
                    // remove the spacer content from dropzone
                    event.target.removeChild(event.target.firstChild);
                    // add the draggable content
                    event.target.appendChild(nodeCopy);
                    $('#' + nodeCopy.id + ' span').show()
                    $("#" + nodeCopy.id).children().children().children("span").attr("id", "cut" + count);
                    // remove the dropzone parent
                    unwrap(event.target);
                    //showing the remove span
                } catch (error) {
                    console.warn("can't move the item to the same place")
                }
                updateDropzones();
                refreshFormNames();
            } else if (data.includes("copy")) {
                if (event.target.parentElement.parentElement.id == "ActionMain") {
                    try {
                        event.target.removeChild(event.target.firstChild);
                        event.target.appendChild(element);
                        unwrap(event.target);
                    } catch (error) {
                        console.warn("can't move the item to the same place")
                    }
                    updateDropzones();
                    refreshFormNames();
                }
            }
        }
        const updateDropzones = () => {
            /* after dropping, refresh the drop target areas
              so there is a dropzone after each item
              using jQuery here for simplicity */

            var dz = $('<div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>');

            // delete old dropzones
            $('.dropzone').remove();

            // insert new dropdzone after each item
            dz.insertAfter('.card.draggable');

            // insert new dropzone in any empty swimlanes
            $(".items:not(:has(.card.draggable))").append(dz);
        };
        function hasClass(target, className) {
            return new RegExp('(\\s|^)' + className + '(\\s|$)').test(target.className);
        }
        function addClass(ele, cls) {
            if (!hasClass(ele, cls)) ele.className += " " + cls;
        }
        function removeClass(ele, cls) {
            if (hasClass(ele, cls)) {
                var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
                ele.className = ele.className.replace(reg, ' ');
            }
        }
        function unwrap(node) {
            node.replaceWith(...node.childNodes);
        }
        function removeAction(nodeId) {
            if ($("#mainActions .draggable").length > 1) {
                $('#' + nodeId.id).parent().parent().parent().next().remove()
                $('#' + nodeId.id).parent().parent().parent().remove();
            } else {
                $('#' + nodeId.id).parent().parent().parent().remove();
            }
        }
        var form = $('#form');
        form.submit(function (e) {
            e.preventDefault();
            if (form.valid()) {
                e.preventDefault();
                debugger
                ajaxScript.makeAjaxRequest('Post', "/Campaign/CreateCampaign", form.serialize()).then(function (data) {
                    if (data.status == true) {
                        ShowDivSuccess(data.message);
                    }
                    else {
                        ShowDivError(data.message);
                    }
                });
            } else {
                ShowDivError("Input data is not valid");
            }
        });
        function refreshFormNames() {
            var name = "";
            var substr = "";
            $.each($('#mainActions .card'), function (key, val) {
                $.each($(val).find('.form-control'), function (key2, val2) {
                    name = $(val2).attr('name');
                    substr = name.substring(name.indexOf("]") + 1, name.length);
                    $(val2).attr('name', "CallActions[" + key + "]" + substr)
                    $(val2).next().attr('data-valmsg-for', "CallActions[" + key + "]" + substr)
                });
            });
        }
    </script>
}