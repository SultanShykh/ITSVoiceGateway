@using ITSVoice.Models
@model CampaignModel

@section styles
    {
    <style>
        .card.draggable {
            margin-bottom: 1rem;
            cursor: grab;
        }

        .droppable {
            background-color: var(--primary);
            min-height: 120px;
            margin-bottom: 1rem;
        }
    </style>
}

<div id="main-content">
    <div class="container-fluid">
        <div class="row py-3">
            <div class="col-sm-6 col-md-6 col-xl-6">
                <div class="card bg-light">
                    <div class="card-body" id="act">
                        <h6 class="card-title text-uppercase text-truncate py-2">Choose Actions</h6>
                            <div class="items border border-light">
                                @{
                                    for (int i = 0; i < Model.CallFlowQueue.Count; i++)
                                    {
                                        <div class="card draggable shadow" id="action-@i" draggable="true" ondragstart="drag(event)">
                                            <div class="card-body p-2">
                                                <div class="card-title">
                                                    <a href="" class="lead font-weight-light">Action: @Model.CallFlowQueue[i].Action.ToString()</a>
                                                    <span class="lnr lnr-circle-minus text-danger" id="remove-@i" onclick="removeAction(this)"></span>
                                                </div>

                                                @Html.Hidden($"CallActions[{i}].Action", null, new { @class = "form-control" })

                                                @if (Model.CallFlowQueue[i].Action == "Callback")
                                                {
                                                    Callback obj = Model.CallFlowQueue[i].GetInstance<Callback>();

                                                    @Html.LabelFor(model => obj.CallbackDelay)
                                                    @Html.MyTextBoxFor(m => obj.CallbackDelay, $"CallActions[{i}].CallbackDelay", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].CallbackDelay");
                                                    <br />
                                                    @Html.LabelFor(model => obj.DisconnectDelay);
                                                    @Html.MyTextBoxFor(m => obj.DisconnectDelay, $"CallActions[{i}].DisconnectDelay", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].DisconnectDelay");
                                                }
                                                else if (Model.CallFlowQueue[i].Action == "Beep")
                                                {
                                                    Beep obj = Model.CallFlowQueue[i].GetInstance<Beep>();

                                                    @Html.LabelFor(model => obj.OptionalFilePath);
                                                    @Html.MyDropDownListFor(m => obj.OptionalFilePath, $"CallActions[{i}].OptionalFilePath", new SelectList(obj.OptionalFilePathItems, "Value", "Text"), null, new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].OptionalFilePath");
                                                }
                                                else if (Model.CallFlowQueue[i].Action == "WaveFile")
                                                {
                                                    WaveFile obj = Model.CallFlowQueue[i].GetInstance<WaveFile>();

                                                    @Html.LabelFor(model => obj.InitialDelay);
                                                    @Html.MyTextBoxFor(m => obj.InitialDelay, $"CallActions[{i}].InitialDelay", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].InitialDelay");
                                                    <br />
                                                    @Html.LabelFor(model => obj.FilePath);
                                                    @Html.MyDropDownListFor(m => obj.FilePath, $"CallActions[{i}].FilePath", new SelectList(obj.FilePathItems, "Value", "Text"), null, new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].FilePath");
                                                }
                                                else if (Model.CallFlowQueue[i].Action == "InputBoolResponse")
                                                {
                                                    InputBoolResponse obj = Model.CallFlowQueue[i].GetInstance<InputBoolResponse>();

                                                    @Html.LabelFor(model => obj.InitialDelay);
                                                    @Html.MyTextBoxFor(m => obj.InitialDelay, $"CallActions[{i}].InitialDelay", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].InitialDelay");
                                                    <br />
                                                    @Html.LabelFor(model => obj.TrueFilePath);
                                                    @Html.MyDropDownListFor(m => obj.TrueFilePath, $"CallActions[{i}].TrueFilePath", new SelectList(obj.TrueFilePathItems, "Value", "Text"), null, new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].TrueFilePath");
                                                    <br />
                                                    @Html.LabelFor(model => obj.FalseFilePath);
                                                    @Html.MyDropDownListFor(m => obj.FalseFilePath, $"CallActions[{i}].FalseFilePath", new SelectList(obj.FalseFilePathItems, "Value", "Text"), null, new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].FalseFilePath");
                                                }
                                                else if (Model.CallFlowQueue[i].Action == "Input")
                                                {
                                                    Input obj = Model.CallFlowQueue[i].GetInstance<Input>();

                                                    @Html.LabelFor(model => obj.Timeout);
                                                    @Html.MyTextBoxFor(m => obj.Timeout, $"CallActions[{i}].Timeout", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].Timeout");
                                                    <br />
                                                    @Html.LabelFor(model => obj.Type);
                                                    @Html.MyDropDownListFor(m => obj.Type, $"CallActions[{i}].Type", new SelectList(obj.TypeItems, "Value", "Text"), null, new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].Type");
                                                    <br />
                                                    @Html.LabelFor(model => obj.Length);
                                                    @Html.MyTextBoxFor(m => obj.Length, $"CallActions[{i}].Length", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].Length");
                                                }
                                                else if (Model.CallFlowQueue[i].Action == "InputStringResponseTTS")
                                                {
                                                    InputStringResponseTTS obj = Model.CallFlowQueue[i].GetInstance<InputStringResponseTTS>();

                                                    @Html.LabelFor(model => obj.InitialDelay);
                                                    @Html.MyTextBoxFor(m => obj.InitialDelay, $"CallActions[{i}].InitialDelay", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].InitialDelay");
                                                    <br />
                                                    @Html.LabelFor(model => obj.Text);
                                                    @Html.MyTextBoxFor(m => obj.Text, $"CallActions[{i}].Text", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].Text");
                                                    <br />
                                                    @Html.LabelFor(model => obj.VoiceName);
                                                    @Html.MyTextBoxFor(m => obj.VoiceName, $"CallActions[{i}].VoiceName", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].VoiceName");
                                                }
                                                else if (Model.CallFlowQueue[i].Action == "InputStringResponseWaveFile")
                                                {
                                                    InputStringResponseWaveFile obj = Model.CallFlowQueue[i].GetInstance<InputStringResponseWaveFile>();
                                                    @Html.LabelFor(model => obj.InitialDelay);
                                                    @Html.MyTextBoxFor(m => obj.InitialDelay, $"CallActions[{i}].InitialDelay", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].InitialDelay");
                                                    <br />
                                                    @Html.LabelFor(model => obj.FilePath);
                                                    @Html.MyDropDownListFor(m => obj.FilePath, $"CallActions[{i}].Type", new SelectList(obj.FilePathItems, "Value", "Text"), null, new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].FilePath");
                                                }
                                                else if (Model.CallFlowQueue[i].Action == "InputVerify")
                                                {
                                                    InputVerify obj = Model.CallFlowQueue[i].GetInstance<InputVerify>();

                                                    @Html.LabelFor(model => obj.VerificationType);
                                                    @Html.MyDropDownListFor(m => obj.VerificationType, $"CallActions[{i}].Type", new SelectList(obj.VerificationTypeItems, "Value", "Text"), null, new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].VerificationType");
                                                    <br />
                                                    @Html.LabelFor(model => obj.VerificationTimeout);
                                                    @Html.MyTextBoxFor(m => obj.VerificationTimeout, $"CallActions[{i}].VerificationTimeout", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].VerificationTimeout");
                                                    <br />
                                                    @Html.LabelFor(model => obj.ResponseType);
                                                    @Html.MyDropDownListFor(m => obj.ResponseType, $"CallActions[{i}].ResponseType", new SelectList(obj.ResponseTypeItems, "Value", "Text"), null, new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].ResponseType");
                                                }
                                                else if (Model.CallFlowQueue[i].Action == "ParameterizedWaveFile")
                                                {
                                                    ParameterizedWaveFile obj = Model.CallFlowQueue[i].GetInstance<ParameterizedWaveFile>();

                                                    @Html.LabelFor(model => obj.InitialDelay);
                                                    @Html.MyTextBoxFor(m => obj.InitialDelay, $"CallActions[{i}].InitialDelay", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].InitialDelay");
                                                    <br />

                                                    @Html.LabelFor(model => obj.ParameterIdentifier);
                                                    @Html.MyTextBoxFor(m => obj.ParameterIdentifier, $"CallActions[{i}].ParameterIdentifier", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].ParameterIdentifier");
                                                    <br />
                                                    @Html.LabelFor(model => obj.ParameterType);
                                                    @Html.MyDropDownListFor(m => obj.ParameterType, $"CallActions[{i}].ParameterType", new SelectList(obj.ParameterTypeItems, "Value", "Text"), null, new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].ParameterType");
                                                    <br />

                                                    @Html.LabelFor(model => obj.OptionalFolder);
                                                    @Html.MyDropDownListFor(m => obj.OptionalFolder, $"CallActions[{i}].OptionalFolder", new SelectList(obj.OptionalFolderItems, "Value", "Text"), null, new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].OptionalFolder");
                                                }
                                                else if (Model.CallFlowQueue[i].Action == "TTS")
                                                {
                                                    TTS obj = Model.CallFlowQueue[i].GetInstance<TTS>();

                                                    @Html.LabelFor(model => obj.InitialDelay);
                                                    @Html.MyTextBoxFor(m => obj.InitialDelay, $"CallActions[{i}].InitialDelay", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].InitialDelay");
                                                    <br />
                                                    @Html.LabelFor(model => obj.Text);
                                                    @Html.MyTextBoxFor(m => obj.Text, $"CallActions[{i}].Text", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].Text");
                                                    <br />
                                                    @Html.LabelFor(model => obj.VoiceName);
                                                    @Html.MyTextBoxFor(m => obj.Text, $"CallActions[{i}].VoiceName", new { @class = "form-control form-control-sm" });
                                                    @Html.ValidationMessage($"CallActions[{i}].VoiceName");
                                                }

                                            </div>
                                        </div>
                                        <div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>
                                    }
                                }
                            </div>
                    </div>
                </div>
            </div>

            <!--For Main Actions-->
            <div class="col-sm-6 col-md-6 col-xl-6">
                <form action="/Campaign/CreateCampaign" method="post" id="form">
                    <p>CallType:</p>
                    <label class="radio radio-inline">
                        @Html.RadioButtonFor(model => model.CallType, "Inbound") Inbound Call

                        @*<input type="radio" id="CallType" name="CallType" value="inboundCall"> Inbound Call*@
                    </label>
                    <label class="radio radio-inline">
                        @Html.RadioButtonFor(model => model.CallType, "Outbound") Outbound Call
                        @*<input type="radio" id="CallType" name="CallType" value="outboundCall"> Outbound Call*@
                    </label>
                    <br />
                    @Html.ValidationMessageFor(model => model.CallType)
                    <div class="card bg-light">
                        <div class="card-body" id="ActionMain">
                            <h6 class="card-title text-uppercase text-truncate py-2">Call Actions</h6>
                            <div class="items border border-light" id="mainActions">
                                <div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.Name)
                                </div>
                                <div class="col-sm-8">
                                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control form-control-sm" })
                                    @Html.ValidationMessageFor(model => model.Name)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.StartDate)
                                </div>
                                <div class="col-sm-8">
                                    @Html.TextBoxFor(model => model.StartDate, new { @class = "form-control form-control-sm", type = "date" })
                                    @Html.ValidationMessageFor(model => model.StartDate)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.EndDate)
                                </div>
                                <div class="col-sm-8">
                                    @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control form-control-sm", type = "date" })
                                    @Html.ValidationMessageFor(model => model.EndDate)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.DailyStartTime)
                                </div>
                                <div class="col-sm-8">
                                    @Html.TextBoxFor(model => model.DailyStartTime, new { @class = "form-control form-control-sm", type = "time" })
                                    @Html.ValidationMessageFor(model => model.DailyStartTime)
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.DailyEndTime)
                                </div>
                                <div class="col-sm-8">
                                    @Html.TextBoxFor(model => model.DailyEndTime, new { @class = "form-control form-control-sm", type = "time" })
                                    @Html.ValidationMessageFor(model => model.DailyEndTime)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.RemoteIP)
                                </div>
                                <div class="col-sm-8">
                                    @Html.TextBoxFor(model => model.RemoteIP, new { @class = "form-control form-control-sm" })
                                    @Html.ValidationMessageFor(model => model.RemoteIP)
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.IsIndefinite)
                                </div>
                                <div class="col-sm-8">
                                    @Html.TextBoxFor(model => model.IsIndefinite, new { @class = "form-control form-control-sm" })
                                    @Html.ValidationMessageFor(model => model.IsIndefinite)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.Is24Hours)
                                </div>
                                <div class="col-sm-8">
                                    @Html.TextBoxFor(model => model.Is24Hours, new { @class = "form-control form-control-sm" })
                                    @Html.ValidationMessageFor(model => model.Is24Hours)
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="Status">Status:</label>
                                </div>
                                <div class="col-sm-8">
                                    <select name="Status" id="Status" class="form-control form-control-sm">
                                        <option value="1">Active</option>
                                        <option value="0">InActive</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="Type">Type:</label>
                                </div>
                                <div class="col-sm-8">
                                    <select name="Type" id="Type" class="form-control form-control-sm">
                                        <option value="1">Standard</option>
                                        <option value="2">Transactional</option>
                                        <option value="3">Callback</option>
                                        <option value="4">Answer</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.Cost)
                                </div>
                                <div class="col-sm-8">
                                    @Html.TextBoxFor(model => model.Cost, new { @class = "form-control form-control-sm" })
                                    @Html.ValidationMessageFor(model => model.Cost)
                                </div>
                            </div>
                        </div>

                    </div>

                    <input type="submit" class="btn btn-sm btn-primary mt-2" />
                </form>
            </div>
        </div>
    </div>
</div>
@section scripts
    {
    <script>
        var count = 1;
        var form = $('#form');

        $(document).ready(function () {
            $('#act span').hide();
        });

        const drag = (event) => {
            event.dataTransfer.setData("text/plain", event.target.id);
        }

        const allowDrop = (ev) => {
            if (ev.target.parentElement.parentElement.id == "ActionMain") {
                ev.preventDefault();
                if (hasClass(ev.target, "dropzone")) {
                    addClass(ev.target, "droppable");
                }
            }
        }

        const clearDrop = (ev) => {
            removeClass(ev.target, "droppable");
        }
        
        const updateDropzones = () => {
            /* after dropping, refresh the drop target areas
              so there is a dropzone after each item
              using jQuery here for simplicity */

            var dz = $('<div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>');

            // delete old dropzones
            $('.dropzone').remove();

            // insert new dropdzone after each item
            dz.insertAfter('.card.draggable');

            // insert new dropzone in any empty swimlanes
            $(".items:not(:has(.card.draggable))").append(dz);
        };

        function hasClass(target, className) {
            return new RegExp('(\\s|^)' + className + '(\\s|$)').test(target.className);
        }

        function addClass(ele, cls) {
            if (!hasClass(ele, cls)) ele.className += " " + cls;
        }

        function removeClass(ele, cls) {
            if (hasClass(ele, cls)) {
                var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
                ele.className = ele.className.replace(reg, ' ');
            }
        }

        function unwrap(node) {
            node.replaceWith(...node.childNodes);
        }

        function removeAction(nodeId) {
            if ($("#mainActions .draggable").length > 1) {
                $('#' + nodeId.id).parent().parent().parent().next().remove()
                $('#' + nodeId.id).parent().parent().parent().remove();

                refreshFormNames();
            } else {
                $('#' + nodeId.id).parent().parent().parent().remove();
                refreshFormNames();
            }
        }

        const drop = (event) => {
            event.preventDefault();
            const data = event.dataTransfer.getData("text/plain");
            const element = document.querySelector(`#${data}`);

            if (data.includes("action")) {
                const nodeCopy = document.getElementById(data).cloneNode(true);
                nodeCopy.id = "copy" + count;

                try {
                    var ss = $('#copy' + count);
                    // remove the spacer content from dropzone
                    event.target.removeChild(event.target.firstChild);
                    // add the draggable content
                    event.target.appendChild(nodeCopy);
                    $('#' + nodeCopy.id + ' span').show()
                    $("#" + nodeCopy.id).children().children().children("span").attr("id", "cut" + count);
                    // remove the dropzone parent
                    unwrap(event.target);
                    //showing the remove span

                } catch (error) {
                    console.warn("can't move the item to the same place")
                }
                updateDropzones();
                refreshFormNames();
                ++count;

            } else if (data.includes("copy")) {
                if (event.target.parentElement.parentElement.id == "ActionMain") {
                    try {
                        event.target.removeChild(event.target.firstChild);
                        event.target.appendChild(element);
                        unwrap(event.target);


                    } catch (error) {
                        console.warn("can't move the item to the same place")
                    }
                    updateDropzones();
                    refreshFormNames();
                }
            }
        }

        form.submit(function (e) {
            form.removeData('validator');
            form.removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse(form);
            
            e.preventDefault();
            if (form.valid()) {
                $('.field-validation-error > span').css("color", "red");
                ajaxScript.makeAjaxRequest('Post', "/Campaign/CreateCampaign", form.serialize()).then(function (data) {
                    if (data.status == true) {
                        ShowDivSuccess(data.message);
                    }
                    else {
                        ShowDivError(data.message);
                    }
                });
            } 
        });

        function refreshFormNames() {
            var name = "";
            var substr = "";
            $.each($('#mainActions .card'), function (key, val) {
                $.each($(val).find('.form-control'), function (key2, val2) {
                    name = $(val2).attr('name');
                    substr = name.substring(name.indexOf(".") + 1, name.length);

                    $(val2).attr('id', "CallActions[" + key + "]." + substr);
                    $(val2).attr('name', "CallActions[" + key + "]." + substr);
                    $(val2).next().attr('data-valmsg-for', "CallActions[" + key + "]." + substr);

                });
            });
        }

    </script>
}