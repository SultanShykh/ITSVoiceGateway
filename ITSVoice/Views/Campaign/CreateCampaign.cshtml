@model List<ITSVoice.Models.BaseAction>
@using ITSVoice.Models

@section styles
    {
    <style>
        .card.draggable {
            margin-bottom: 1rem;
            cursor: grab;
        }

        .droppable {
            background-color: var(--primary);
            min-height: 120px;
            margin-bottom: 1rem;
        }
    </style>
}

<div id="main-content">
    <div class="container-fluid">
        <div class="row py-3">
            <div class="col-sm-6 col-md-6 col-xl-6">
                <div class="card bg-light">
                    <div class="card-body" id="act">
                        <h6 class="card-title text-uppercase text-truncate py-2">Choose Actions</h6>
                        <div class="items border border-light">
                            @{
                                for (int i = 0; i < Model.Count; i++)
                                {
                                    <div class="card draggable shadow" id="action-@i" draggable="true" ondragstart="drag(event)">
                                        <div class="card-body p-2">
                                            <div class="card-title">
                                                <a href="" class="lead font-weight-light">Action: @Model[i].Action.ToString()</a>
                                                <span class="lnr lnr-circle-minus text-danger" id="remove-@i" onclick="removeAction(this)"></span>
                                            </div>

                                            @Html.Hidden($"[{i}].Action", Model[i].Action.ToString())

                                            @if (Model[i].Action == "Callback")
                                            {
                                                Callback obj = Model[i].GetInstance<Callback>();

                                                @Html.Label($"[{i}].CallbackDelay:")
                                                @Html.TextBox($"[{i}].CallbackDelay", obj.CallbackDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].CallbackDelay")
                                                <br />
                                                @Html.Label($"[{i}].DisconnectDelay:")
                                                @Html.TextBox($"[{i}].DisconnectDelay", obj.CallbackDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].CallbackDelay")
                                            }
                                            else if (Model[i].Action == "Beep")
                                            {
                                                Beep obj = Model[i].GetInstance<Beep>();

                                                @Html.Label($"[{i}].FilePath:")
                                                @Html.DropDownList($"[{i}].FilePath", new SelectList(obj.OptionalFilePathItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].FilePath")
                                            }
                                            else if (Model[i].Action == "WaveFile")
                                            {
                                                WaveFile obj = Model[i].GetInstance<WaveFile>();

                                                @Html.Label($"[{i}].InitialDelay:")
                                                @Html.TextBox($"[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].InitialDelay")
                                                <br />
                                                @Html.Label($"[{i}].FilePath:")
                                                @Html.DropDownList($"[{i}].FilePath", new SelectList(obj.FilePathItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].FilePath")

                                            }
                                            else if (Model[i].Action == "InputBoolResponse")
                                            {
                                                InputBoolResponse obj = Model[i].GetInstance<InputBoolResponse>();

                                                @Html.Label($"[{i}].InitialDelay:")
                                                @Html.TextBox($"[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].InitialDelay")
                                                <br />
                                                @Html.Label($"[{i}].TrueFilePath:")
                                                @Html.DropDownList($"[{i}].TrueFilePath", new SelectList(obj.TrueFilePathItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].TrueFilePath")
                                                <br />
                                                @Html.Label($"[{i}].FalseFilePath:")
                                                @Html.DropDownList($"[{i}].FalseFilePath", new SelectList(obj.FalseFilePathItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].FalseFilePath")
                                            }
                                            else if (Model[i].Action == "Input")
                                            {
                                                Input obj = Model[i].GetInstance<Input>();

                                                @Html.Label($"[{i}].Timeout:")
                                                @Html.TextBox($"[{i}].Timeout", obj.Timeout, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].Timeout")
                                                <br />
                                                @Html.Label($"[{i}].Type:")
                                                @Html.DropDownList($"[{i}].Type", new SelectList(obj.TypeItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].Type")
                                                <br />
                                                @Html.Label($"[{i}].Length:")
                                                @Html.TextBox($"[{i}].Length", obj.Length, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].Length")
                                            }
                                            else if (Model[i].Action == "InputStringResponseTTS")
                                            {
                                                InputStringResponseTTS obj = Model[i].GetInstance<InputStringResponseTTS>();

                                                @Html.Label($"[{i}].InitialDelay:")
                                                @Html.TextBox($"[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].InitialDelay")
                                                <br />
                                                @Html.Label($"[{i}].Text:")
                                                @Html.TextBox($"[{i}].Text", obj.Text, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].Text")
                                                <br />
                                                @Html.Label($"[{i}].VoiceName:")
                                                @Html.TextBox($"[{i}].VoiceName", obj.VoiceName, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].VoiceName")
                                            }
                                            else if (Model[i].Action == "InputStringResponseWaveFile")
                                            {
                                                InputStringResponseWaveFile obj = Model[i].GetInstance<InputStringResponseWaveFile>();

                                                @Html.Label($"[{i}].InitialDelay:")
                                                @Html.TextBox($"[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].InitialDelay")
                                                <br />
                                                @Html.Label($"[{i}].FilePath:")
                                                @Html.DropDownList($"[{i}].FilePath", new SelectList(obj.FilePathItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].FilePath")
                                            }
                                            else if (Model[i].Action == "InputVerify")
                                            {
                                                InputVerify obj = Model[i].GetInstance<InputVerify>();

                                                @Html.Label($"[{i}].VerificationType:")
                                                @Html.DropDownList($"[{i}].VerificationType", new SelectList(obj.VerificationTypeItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].VerificationType")
                                                <br />
                                                @Html.Label($"[{i}].VerificationTimeout:")
                                                @Html.TextBox($"[{i}].VerificationTimeout", obj.VerificationTimeout, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].VerificationTimeout")
                                                <br />
                                                @Html.Label($"[{i}].ResponseType:")
                                                @Html.DropDownList($"[{i}].ResponseType", new SelectList(obj.ResponseTypeItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].ResponseType")
                                            }
                                            else if (Model[i].Action == "ParameterizedWaveFile")
                                            {
                                                ParameterizedWaveFile obj = Model[i].GetInstance<ParameterizedWaveFile>();

                                                @Html.Label($"[{i}].OptionalFolder:")
                                                @Html.DropDownList($"[{i}].OptionalFolder", new SelectList(obj.OptionalFolderItems, "Value", "Text"), new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].OptionalFolder")
                                            }
                                            else if (Model[i].Action == "TTS")
                                            {
                                                TTS obj = Model[i].GetInstance<TTS>();

                                                @Html.Label($"[{i}].InitialDelay:")
                                                @Html.TextBox($"[{i}].InitialDelay", obj.InitialDelay, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].InitialDelay")
                                                <br />
                                                @Html.Label($"[{i}].Text:")
                                                @Html.TextBox($"[{i}].Text", obj.Text, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].Text")
                                                <br />
                                                @Html.Label($"[{i}].VoiceName:")
                                                @Html.TextBox($"[{i}].VoiceName", obj.VoiceName, new { @class = "form-control form-control-sm" });
                                                @Html.ValidationMessage($"[{i}].VoiceName")
                                            }

                                        </div>
                                    </div>
                                    <div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!--For Main Actions-->
            <div class="col-sm-6 col-md-6 col-xl-6">
                <form action="/Campaign/CreateCampaign" method="post" id="form">
                    @Html.ValidationSummary(false)
                    <div class="form-group">
                        <label class="radio radio-inline">
                            <input type="radio" id="call" name="call" value="inboundCall"> Inbound Call
                        </label>
                        <label class="radio radio-inline">
                            <input type="radio" id="call" name="call" value="outboundCall"> Outbound Call
                        </label>
                    </div>

                    <div class="card bg-light">
                        <div class="card-body" id="ActionMain">
                            <h6 class="card-title text-uppercase text-truncate py-2">Campaign Actions</h6>
                            <div class="items border border-light" id="mainActions">
                                <div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>
                            </div>
                        </div>
                    </div>
                    <input type="submit" class="btn btn-sm btn-primary mt-2" />
                </form>
            </div>
        </div>
    </div>
</div>
@section scripts
    {
    <script>
        $(document).ready(function () {
            $('#act span').hide();
        });
        var count = 1;
        const drag = (event) => {
            event.dataTransfer.setData("text/plain", event.target.id);
        }
        const allowDrop = (ev) => {
            ev.preventDefault();
            if (hasClass(ev.target, "dropzone")) {
                addClass(ev.target, "droppable");
            }
        }
        const clearDrop = (ev) => {
            removeClass(ev.target, "droppable");
        }
        const drop = (event) => {
            event.preventDefault();
            const data = event.dataTransfer.getData("text/plain");
            const nodeCopy = document.getElementById(data).cloneNode(true);
            nodeCopy.id = "copy" + count;
            ++count;
            try {
                // remove the spacer content from dropzone
                event.target.removeChild(event.target.firstChild);
                // add the draggable content

                event.target.appendChild(nodeCopy);
                $('#' + nodeCopy.id + ' span').show()
                $("#" + nodeCopy.id).children().children().children("span").attr("id", "cut" + count);
                // remove the dropzone parent
                unwrap(event.target);
                //showing the remove span 

            } catch (error) {
                console.warn("can't move the item to the same place")
            }
            updateDropzones();
        }
        const updateDropzones = () => {
            /* after dropping, refresh the drop target areas
              so there is a dropzone after each item
              using jQuery here for simplicity */

            var dz = $('<div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>');

            // delete old dropzones
            $('.dropzone').remove();

            // insert new dropdzone after each item
            dz.insertAfter('.card.draggable');

            // insert new dropzone in any empty swimlanes
            $(".items:not(:has(.card.draggable))").append(dz);
        };
        function hasClass(target, className) {
            return new RegExp('(\\s|^)' + className + '(\\s|$)').test(target.className);
        }
        function addClass(ele, cls) {
            if (!hasClass(ele, cls)) ele.className += " " + cls;
        }
        function removeClass(ele, cls) {
            if (hasClass(ele, cls)) {
                var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
                ele.className = ele.className.replace(reg, ' ');
            }
        }
        function unwrap(node) {
            node.replaceWith(...node.childNodes);
        }

        //function getFormData(form) {
        //    var unindexed_array = $(form).serializeArray();
        //    var ss = "";
        //    $.map(unindexed_array, function (n, i) {
        //        ss += n['name'] + ":" + n['value'] + ",";
        //    });
        //    return ss.substring(0, ss.length - 1);
        //}

        //var form = $('#form');
        //form.submit(function (e) {
        //    e.preventDefault();
        //    var ss = "";
        //    var obj = "";
        //    var id1 = $('#form #call').first().attr('id');
        //    var id2 = $('#form #inboundCall').attr('id');
        //    var id3 = $('#form #outboundCall').attr('id');

        //    if (id1 == id2 || id1 == id3) {
        //        console.log('done');
        //    }

        //    if ($('#form #inbound').length > 0 || $('#form #outbound').length > 0) {
        //        console.log(true);
        //    }

        //    $.each(form.find('form'), function (key, val) {
        //        obj += key + ":{" + getFormData(val) + "},";
        //        ss += obj;
        //        obj = "";
        //    });
        //    ss = "{" + ss.substring(0, ss.length - 1) + "}";
        //    console.log(ss);
        //});
        function removeAction(nodeId) {
            if ($("#mainActions .draggable").length > 1) {
                $('#' + nodeId.id).parent().parent().parent().next().remove()
                $('#' + nodeId.id).parent().parent().parent().remove();
            } else {
                $('#' + nodeId.id).parent().parent().parent().remove();
            } 
        }

        var form = $('#form');
        form.submit(function (e) {
            if (!form.valid()) {
                e.preventDefault();
                alert("Values Required");
            }
        });

    </script>
}